#!/usr/bin/python
#
# Copyright (c) 2010 The Ginsu Project Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

Import('env')

def Glob(dir, include_patterns, exclude_patterns):
  files = set()
  for pattern in include_patterns:
    files.update(env.Glob(dir + '/' + pattern))
  for pattern in exclude_patterns:
    files.difference_update(env.Glob(dir + '/' + pattern))
  return list(files)

# OpenSceneGraph uses exceptions. Enable it.
env['ENABLE_EXCEPTIONS'] = True

# OpenThreads
srcs = Glob('trunk/src/OpenThreads/common', ['*.cpp'], [])
if env.Bit('windows'):
  srcs += Glob('trunk/src/OpenThreads/win32', ['*.cpp'], [])
else:
  srcs += Glob('trunk/src/OpenThreads/pthreads', ['*.c++'], [])
env.ComponentLibrary('OpenThreads', srcs, COMPONENT_STATIC=True)
env.Append(LIBS=['OpenThreads'])

# osg
srcs = Glob('trunk/src/osg', ['*.cpp'], ['Matrix_implementation.cpp'])
env.ComponentLibrary('osg', srcs, COMPONENT_STATIC=True)
env.Append(LIBS=['osg'])

# osgDB
srcs = Glob('trunk/src/osgDB', ['*.cpp'], [])
env.ComponentLibrary('osgDB', srcs, COMPONENT_STATIC=True)
env.Append(LIBS=['osgDB'])

# osgUtil
srcs = Glob('trunk/src/osgUtil', ['*.cpp'], [])
srcs += Glob('trunk/src/osgUtil/tristripper/src', ['*.cpp'], [])
env.Append(CPPPATH=['trunk/src/osgUtil/tristripper/include'])
env.ComponentLibrary('osgUtil', srcs, COMPONENT_STATIC=True)
env.Append(LIBS=['osgUtil'])

# osgGA
srcs = Glob('trunk/src/osgGA', ['*.cpp'], [])
env.ComponentLibrary('osgGA', srcs, COMPONENT_STATIC=True)
env.Append(LIBS=['osgGA'])

# osgText
srcs = Glob('trunk/src/osgText', ['*.cpp'], [])
env.ComponentLibrary('osgText', srcs, COMPONENT_STATIC=True)
env.Append(LIBS=['osgText'])

# osgViewer
if env.Bit('windows'):
  srcs = Glob('trunk/src/osgViewer', ['*.cpp'], ['*Carbon.cpp', '*X11.cpp'])
else:
  srcs = Glob('trunk/src/osgViewer', ['*.cpp'], ['*Carbon.cpp', '*Win32.cpp'])
env.ComponentLibrary('osgViewer', srcs, COMPONENT_STATIC=True)
env.Append(LIBS=['osgViewer'])
